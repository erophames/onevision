import argparse
import json
import datetime
from model.model_builder import AdvancedPathogenDetector
from utils.logging_config import setup_logging
from utils.arg_parser import parse_arguments

def main():
    setup_logging()
    args = parse_arguments()

    print(r"""
              _|_|                        _|      _|  _|            _|
            _|    _|  _|_|_|      _|_|    _|      _|        _|_|_|        _|_|    _|_|_|
            _|    _|  _|    _|  _|_|_|_|  _|      _|  _|  _|_|      _|  _|    _|  _|    _|
            _|    _|  _|    _|  _|          _|  _|    _|      _|_|  _|  _|    _|  _|    _|
              _|_|    _|    _|    _|_|_|      _|      _|  _|_|_|    _|    _|_|    _|    _|
            """)

    print(f"""\033[92m
        ðŸŒ± OneVision - Advanced Plant Pathogen Detection System ðŸŒ¿
        Copyright (c) {datetime.datetime.now().year} Fabian Franco-Roldan

        Model Architecture:

        Backbone: EfficientNetV2B2 (ImageNet pretrained)

        Custom Head:
        â€¢ Hybrid Attention Block (Channel + Spatial Attention)
        â€¢ Global Average Pooling
        â€¢ Dense Layers (256 units) with SWISH activation
        â€¢ Batch Normalization + Dropout
        â€¢ Temperature Scaling for confidence calibration
        â€¢ Softmax Classification Layer

        Key Features:
        âœ… 300x300px RGB input resolution
        âœ… Supports 50-1000 plant disease classes
        âœ… Test-Time Augmentation (TTA) for robust predictions
        âœ… Hybrid Attention Mechanism for enhanced feature extraction
        âœ… Temperature Scaling for calibrated confidence scores
        âœ… EfficientNetV2B2 preprocessing for input normalization
        âœ… Class Weighting for imbalanced datasets
        âœ… Hyperparameter Tuning (Random Search, Bayesian Optimization, Hyperband)
        âœ… Custom Metrics: SparseMacroF1, SparseF1, SparsePrecision, SparseRecall
        âœ… Advanced Training Pipeline:

          âœ… Initial training with frozen backbone
          âœ… Fine-tuning with partial unfreezing
          âœ… Temperature calibration for confidence calibration
          âœ… Early stopping, learning rate scheduling, and model checkpointing

        Purpose:
        Automated detection of plant diseases from leaf images using state-of-the-art deep learning techniques for precision agriculture.
        The model incorporates advanced attention mechanisms, confidence calibration, robust data augmentation, and hyperparameter tuning for reliable predictions.
        \033[0m
    """)
    
    detector = AdvancedPathogenDetector(args.dataset, args.output)

    if args.image:
        result = detector.predict(args.image)
        print(json.dumps(result, indent=2))
    elif args.dataset:
        detector.train(tune_hyperparams=args.tune)

if __name__ == "__main__":
    main()
